basePath: /api
definitions:
  errors.ErrorCode:
    enum:
    - 1000
    - 1001
    - 1500
    - 1501
    - 3000
    - 3001
    - 3002
    - 4000
    - 4001
    - 4002
    type: integer
    x-enum-varnames:
    - ErrInternal
    - ErrDatabase
    - ErrUnauthorized
    - ErrForbidden
    - ErrBadRequest
    - ErrInvalidInput
    - ErrMissingField
    - ErrResourceNotFound
    - ErrDuplicateEntry
    - ErrAccountAlreadyExists
  errors.ErrorResponse:
    properties:
      errorCode:
        $ref: '#/definitions/errors.ErrorCode'
      message:
        type: string
      path:
        type: string
      statusCode:
        type: integer
      timestamp:
        type: string
    type: object
  health.HealthResponse:
    properties:
      message:
        example: ""
        type: string
      status:
        example: ok
        type: string
    type: object
  model.CreatePostDTO:
    properties:
      author_id:
        type: string
      content:
        type: string
      title:
        type: string
    required:
    - author_id
    - content
    - title
    type: object
  model.CreateUserDTO:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
    required:
    - email
    - firstName
    - lastName
    - phone
    type: object
  model.Post:
    properties:
      author:
        $ref: '#/definitions/model.User'
      author_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.UpdateUserDTO:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      phone:
        type: string
      posts:
        items:
          $ref: '#/definitions/model.Post'
        type: array
      updatedAt:
        type: string
    type: object
info:
  contact: {}
  description: API for PROJECT_NAME
  title: PROJECT_NAME
  version: "1.0"
paths:
  /healthz/alive:
    get:
      consumes:
      - application/json
      description: Check if the application is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/health.HealthResponse'
      summary: Liveness check
      tags:
      - health
  /healthz/ready:
    get:
      consumes:
      - application/json
      description: Check if the application is ready
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/health.HealthResponse'
      summary: Readiness check
      tags:
      - health
  /ping:
    get:
      consumes:
      - application/json
      description: Tests connectivity by pinging the application, requires authentication
        to verify caller identity
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/health.HealthResponse'
      security:
      - BearerAuth: []
      summary: Ping
      tags:
      - health
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new post with the provided data
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.CreatePostDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    get:
      consumes:
      - application/json
      description: Get a post's details by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a post by ID
      tags:
      - posts
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided data
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update a user
      tags:
      - users
securityDefinitions:
  ApiKey:
    description: Bearer token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
